#!/usr/bin/env node

const nodemailer = require('nodemailer');
const handlebars = require('handlebars');
const dotenv = require('dotenv').config();
const path = require('path');
const { promises: fs } = require('fs');

const config = require('../database/config').config;
const { Emails } = require('../database/email');
const { URL, NODE_ENV } = process.env;
const options = {
  day: 'numeric',
  month: 'short',
  year: 'numeric',
  hour: '2-digit',
  minute:'2-digit'
};

handlebars.registerHelper('dateFormat', (timestamp) => {
  return new Date(timestamp).toLocaleDateString('de-DE', options);
});

handlebars.registerHelper('currencyFormat', (value) => {
  return value.toFixed(2)+' €';
});

handlebars.registerHelper('couponTypeDiscount', (value) => {
  if (value == 'discount') return true;
  return false;
});

var smtpTransport = (mail) => {
  return nodemailer.createTransport({
    host: mail.mail_host,
    port: mail.mail_port,
    secure: false,
    auth: {
      user: mail.mail_user,
      pass: mail.mail_pass,
    }
  });
}

var newsletterEmail = (title, text, to) => {
	return new Promise(async (resolve, reject) => {
    let { mail } = await config();
		let filepath = path.join(__dirname, '..', 'emails', 'newsletter.html');
  	let file = await fs.readFile(filepath, 'utf8');
    let template = await handlebars.compile(file);
    let email = {
      from: mail.mail_from,
      to: to,
      subject: title,
      html: template({
        url: URL,
        title: title,
        validation: text
      })
    }
    if (mail.sendmail == true) {
      let transporter = smtpTransport(mail);
			let status = await transporter.sendMail(email);
      await Emails.create(email);

			resolve(status);
		} else reject({
      error:'Sendmail is turned off'
    });
	})
}

var orderEmail = async (shoppingcart) => {
  return new Promise(async (resolve, reject) => {
    let { mail } = await config();
		let filepath = path.join(__dirname, '..', 'emails', 'order.html');
  	let file = await fs.readFile(filepath, 'utf8');
    let template = await handlebars.compile(file);
    let email = {
      from: mail.mail_from,
      to: shoppingcart.get('customer').email,
      subject: 'Bestellbestätigung',
      html: template({
        url: URL,
        order: shoppingcart.toObject(),
      })
    }
    if (mail.sendmail == true) {
      let transporter = smtpTransport(mail);
			let status = await transporter.sendMail(email);
      await Emails.create(email);

			resolve(status);
		} else reject({
      error:'Sendmail is turned off'
    });
	})
}

var reportEmail = async(report, title) => {
  return new Promise(async (resolve, reject) => {
    let { mail, schedule } = await config();
		let filepath = path.join(__dirname, '..', 'emails', 'report.html');
  	let file = await fs.readFile(filepath, 'utf8');
    let template = await handlebars.compile(file);
    let email = {
      from: mail.mail_from,
      to: schedule.schedule_email,
      subject: title,
      html: template({
        url: URL,
        title: title,
        ...report
      })
    }
    if (mail.sendmail == true) {
      let transporter = smtpTransport(mail);
			let status = await transporter.sendMail(email);
      await Emails.create(email);

			resolve(status);
		} else reject({
      error:'Sendmail is turned off'
    });
	})
}

module.exports = {
	newsletterEmail,
	orderEmail,
  reportEmail,
};
